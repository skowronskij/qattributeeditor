# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QAttributeEditorDockWidget
                                 A QGIS plugin
 This plugin allows you to edit features attributes easier and faster
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-02-21
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Jakub Skowro≈Ñski
        email                : skowronski.jakub97@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, uic
from qgis.PyQt.QtWidgets import QDockWidget, QListWidgetItem
from qgis.PyQt.QtCore import pyqtSignal, Qt
from qgis.core import QgsApplication, QgsMapLayer, QgsProject
from qgis.utils import iface

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'main_dock.ui'))


class QAttributeEditorDockWidget(QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(QAttributeEditorDockWidget, self).__init__(parent)
        self.setupUi(self)
        self.setIcons()
        self.connectSignals()
        self.connectedLayers = []
        self.selectByList = True

    def setIcons(self):
        """ Setting icons for toolbuttons """
        self.tbPrev.setIcon(
            QgsApplication.getThemeIcon('mActionArrowUp.svg'))
        self.tbNext.setIcon(
            QgsApplication.getThemeIcon('mActionArrowDown.svg'))
        self.tbZoom.setIcon(
            QgsApplication.getThemeIcon('mActionZoomToSelected.svg'))

    def connectSignals(self):
        """ Connecting all signals within dockwidget """
        iface.currentLayerChanged.connect(self.onLayerChange)
        QgsProject().instance().layersWillBeRemoved.connect(self.onLayersDelete)
        self.cbxField.stateChanged.connect(self.onFieldFilter)
        self.qgsFieldCb.fieldChanged.connect(self.fillFeatureList)
        self.lwFeatures.itemSelectionChanged.connect(self.selectFeatureByRow)

    def disconnectSignals(self):
        """ Disconnecting all signals within dockwidget on plugin unload """
        iface.currentLayerChanged.disconnect(self.onLayerChange)
        QgsProject().instance().layersWillBeRemoved.disconnect(self.onLayersDelete)
        self.cbxField.stateChanged.disconnect(self.onFieldFilter)
        self.qgsFieldCb.fieldChanged.disconnect(self.fillFeatureList)
        self.lwFeatures.itemSelectionChanged.disconnect(
            self.selectFeatureByRow)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    @property
    def is_invalid(self):
        layer = iface.activeLayer()
        return not layer or layer.type() != QgsMapLayer.VectorLayer

    def onLayerChange(self, layer):
        """ Setting widget controls to active layer """
        self.qgsFieldCb.setLayer(layer)
        self.fillFeatureList()
        if self.is_invalid:
            return
        if layer.id() not in self.connectedLayers:
            layer.selectionChanged.connect(self.onSelectionChange)
            self.connectedLayers.append(layer.id())

    def onLayersDelete(self, layers):
        for layer in layers:
            if layer in self.connectedLayers:
                self.connectedLayers.remove(layer)

    def onFieldFilter(self, state: int):
        if state == 2:
            self.qgsFieldCb.setEnabled(True)
            current_field = self.qgsFieldCb.currentField()
            if current_field:
                self.fillFeatureList(current_field)
        else:
            self.qgsFieldCb.setEnabled(False)
            self.fillFeatureList()

    def onSelectionChange(self, selected):
        self.selectByList = False
        self.lwFeatures.clearSelection()
        current_field = self.qgsFieldCb.currentField()
        for fid in selected:
            if current_field:
                feat = iface.activeLayer().getFeature(fid)
                fid = f'{fid} {feat[current_field]}'
            item = self.lwFeatures.findItems(str(fid), Qt.MatchExactly)[0]
            item.setSelected(True)
            self.lwFeatures.scrollToItem(item)
        self.selectByList = True

    def fillFeatureList(self, by_attribute=None):
        """ Filling list widget with feature infos """
        self.lwFeatures.clear()
        if self.is_invalid:
            return
        layer = iface.activeLayer()
        if not by_attribute:
            rows = [str(f.id()) for f in layer.getFeatures()]
        else:
            rows = [f'{f.id()} {f[by_attribute]}' for f in layer.getFeatures()]
        self.lwFeatures.addItems(rows)

    def selectFeatureByRow(self):
        """ Selecting active layer feature by selecting item in list """
        if self.is_invalid:
            return
        if self.selectByList:
            layer = iface.activeLayer()
            fids = [int(item.text().split(' ', 1)[0])
                    for item in self.lwFeatures.selectedItems()]
            layer.selectByIds(fids)
